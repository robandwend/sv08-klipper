[homing_override]
axes: xyz
gcode:
  _INITIALIZE_FROM_DETECTED_TOOL
  {% if printer.probe.last_query  %}
         RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
  {% else %}
    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    G90 ; absolute mode
    {% if home_all %}
      G28 Y
      G0 Y30 F1000
      G28 Z
      G0 Y10 F1000
      G28 X
      G0 X10 F1000
    {% endif %}

    {% if 'Y' in params or 'X' in params %}
      G28 Y
      G0 Y30 F1000
    {% endif %}

    {% if 'X' in params %}
      G28 X
      G0 X30 F1000
    {% endif %}

    {% if home_all or 'Z' in params %}
      {% set random_x = (range(-50, 50) | random) / 10 %}
      {% set random_y = (range(-50, 50) | random) / 10 %}

      G90 ; absolute mode
      G0 X{150.0+random_x} Y{150.0+random_y} F12000
      G28 Z
      _ADJUST_Z_HOME_FOR_TOOL_OFFSET
    {% endif %}
    _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
    M400
  {% endif %}


; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}
